"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringBuilder = exports.isMethodNamed = exports.className = exports.isUserEntry = exports.cloneNode = exports.getName = exports.toString = exports.not = exports.isLibrary = exports.getDecorator = exports.hasDecorator = exports.isDecorator = exports.decorates = void 0;
const as_1 = require("../as");
const astBuilder_1 = require("./astBuilder");
const cloneDeep = require("lodash.clonedeep");
function decorates(node, name) {
    return node.name.text === name;
}
exports.decorates = decorates;
function isDecorator(name) {
    return (node) => decorates(node, name);
}
exports.isDecorator = isDecorator;
function hasDecorator(node, name) {
    var _a;
    let decl;
    if (node instanceof as_1.DeclarationStatement) {
        decl = node;
    }
    else {
        decl = node.declaration;
    }
    // because it could be undefined
    return ((_a = decl.decorators) === null || _a === void 0 ? void 0 : _a.some(isDecorator(name))) == true;
}
exports.hasDecorator = hasDecorator;
function getDecorator(node, name) {
    var _a;
    return (_a = node.decorators) === null || _a === void 0 ? void 0 : _a.find(isDecorator(name));
}
exports.getDecorator = getDecorator;
function isLibrary(node) {
    return node.isLibrary || node.internalPath.startsWith("~lib/rt/");
}
exports.isLibrary = isLibrary;
function not(fn) {
    return (t) => !fn(t);
}
exports.not = not;
function toString(node) {
    return astBuilder_1.ASTBuilder.build(node);
}
exports.toString = toString;
function getName(node) {
    if (node instanceof as_1.TypeNode) {
        return node.range.toString();
    }
    if (node instanceof as_1.ClassDeclaration || node instanceof as_1.InterfaceDeclaration) {
        return className(node);
    }
    return node.name.range.toString();
}
exports.getName = getName;
function cloneNode(node) {
    return cloneDeep(node);
}
exports.cloneNode = cloneNode;
function isUserEntry(source) {
    return source.sourceKind == as_1.SourceKind.USER_ENTRY;
}
exports.isUserEntry = isUserEntry;
function className(_class) {
    let name = _class.name.range.toString();
    const typeParameters = _class.typeParameters;
    if (typeParameters) {
        name += `<${typeParameters.map(getName).join(", ")}>`;
    }
    return name;
}
exports.className = className;
function isMethodNamed(name) {
    return (stmt) => stmt.kind == as_1.NodeKind.METHODDECLARATION && toString(stmt.name) === name;
}
exports.isMethodNamed = isMethodNamed;
// export function isSubClassOf(a: ClassDeclaration, b: ClassDeclaration): boolean {
//   a.extendsType?.name.next
// }
class StringBuilder {
    constructor() {
        this.sb = [];
    }
    push(s) {
        this.sb.push(s);
    }
    finish(separator = "\n") {
        let res = this.sb.join(separator);
        this.sb = [];
        return res;
    }
    get last() { return this.sb[this.sb.length - 1]; }
}
exports.StringBuilder = StringBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOEJBWWU7QUFDZiw2Q0FBMEM7QUFFMUMsTUFBTSxTQUFTLEdBQW1CLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBRTlELFNBQWdCLFNBQVMsQ0FBQyxJQUFtQixFQUFFLElBQVk7SUFDekQsT0FBOEIsSUFBSSxDQUFDLElBQUssQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDO0FBQ3pELENBQUM7QUFGRCw4QkFFQztBQUVELFNBQWdCLFdBQVcsQ0FBQyxJQUFZO0lBQ3RDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDekMsQ0FBQztBQUZELGtDQUVDO0FBR0QsU0FBZ0IsWUFBWSxDQUMxQixJQUFnRSxFQUNoRSxJQUFZOztJQUVaLElBQUksSUFBSSxDQUFDO0lBQ1QsSUFBSSxJQUFJLFlBQVkseUJBQW9CLEVBQUU7UUFDeEMsSUFBSSxHQUFHLElBQUksQ0FBQztLQUNiO1NBQU07UUFDTCxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztLQUN6QjtJQUNELGdDQUFnQztJQUNoQyxPQUFPLE9BQUEsSUFBSSxDQUFDLFVBQVUsMENBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBSyxJQUFJLENBQUM7QUFDMUQsQ0FBQztBQVpELG9DQVlDO0FBRUQsU0FBZ0IsWUFBWSxDQUMxQixJQUEwQixFQUMxQixJQUFZOztJQUVaLE9BQU8sTUFBQSxJQUFJLENBQUMsVUFBVSwwQ0FBRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFFLENBQUM7QUFDbkQsQ0FBQztBQUxELG9DQUtDO0FBRUQsU0FBZ0IsU0FBUyxDQUFDLElBQVk7SUFDcEMsT0FBTyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3BFLENBQUM7QUFGRCw4QkFFQztBQUVELFNBQWdCLEdBQUcsQ0FBSSxFQUFxQjtJQUMxQyxPQUFPLENBQUMsQ0FBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixDQUFDO0FBRkQsa0JBRUM7QUFFRCxTQUFnQixRQUFRLENBQUMsSUFBVTtJQUNqQyxPQUFPLHVCQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFGRCw0QkFFQztBQU9ELFNBQWdCLE9BQU8sQ0FBQyxJQUE2QjtJQUNuRCxJQUFJLElBQUksWUFBWSxhQUFRLEVBQUU7UUFDNUIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQzlCO0lBQ0QsSUFBSSxJQUFJLFlBQVkscUJBQWdCLElBQUksSUFBSSxZQUFZLHlCQUFvQixFQUFFO1FBQzVFLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3hCO0lBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNwQyxDQUFDO0FBUkQsMEJBUUM7QUFFRCxTQUFnQixTQUFTLENBQWlCLElBQU87SUFDL0MsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekIsQ0FBQztBQUZELDhCQUVDO0FBRUQsU0FBZ0IsV0FBVyxDQUFDLE1BQWM7SUFDeEMsT0FBTyxNQUFNLENBQUMsVUFBVSxJQUFJLGVBQVUsQ0FBQyxVQUFVLENBQUM7QUFDcEQsQ0FBQztBQUZELGtDQUVDO0FBRUQsU0FBZ0IsU0FBUyxDQUFDLE1BQWdEO0lBQ3hFLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3hDLE1BQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDN0MsSUFBSSxjQUFjLEVBQUU7UUFDbEIsSUFBSSxJQUFJLElBQUksY0FBYyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztLQUN2RDtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQVBELDhCQU9DO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLElBQVk7SUFDeEMsT0FBTyxDQUFDLElBQTBCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksYUFBUSxDQUFDLGlCQUFpQixJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDO0FBQ2pILENBQUM7QUFGRCxzQ0FFQztBQUVELG9GQUFvRjtBQUNwRiw2QkFBNkI7QUFDN0IsSUFBSTtBQUVKLE1BQWEsYUFBYTtJQUExQjtRQUNVLE9BQUUsR0FBYSxFQUFFLENBQUM7SUFhNUIsQ0FBQztJQVhDLElBQUksQ0FBQyxDQUFTO1FBQ1osSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFTLEdBQUcsSUFBSTtRQUNyQixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVELElBQUssSUFBSSxLQUFhLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sR0FBRSxDQUFDLENBQUMsQ0FBQSxDQUFBLENBQUM7Q0FDekQ7QUFkRCxzQ0FjQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgRGVjb3JhdG9yTm9kZSxcclxuICBJZGVudGlmaWVyRXhwcmVzc2lvbixcclxuICBEZWNsYXJhdGlvblN0YXRlbWVudCxcclxuICBTb3VyY2UsXHJcbiAgTm9kZSxcclxuICBTb3VyY2VLaW5kLFxyXG4gIENsYXNzRGVjbGFyYXRpb24sXHJcbiAgVHlwZU5vZGUsXHJcbiAgTm9kZUtpbmQsXHJcbiAgTmFtZWRUeXBlTm9kZSxcclxuICBJbnRlcmZhY2VEZWNsYXJhdGlvbixcclxufSBmcm9tIFwiLi4vYXNcIjtcclxuaW1wb3J0IHsgQVNUQnVpbGRlciB9IGZyb20gXCIuL2FzdEJ1aWxkZXJcIjtcclxuXHJcbmNvbnN0IGNsb25lRGVlcDogPFQ+KHQ6IFQpID0+IFQgPSByZXF1aXJlKFwibG9kYXNoLmNsb25lZGVlcFwiKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWNvcmF0ZXMobm9kZTogRGVjb3JhdG9yTm9kZSwgbmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgcmV0dXJuICg8SWRlbnRpZmllckV4cHJlc3Npb24+bm9kZS5uYW1lKS50ZXh0ID09PSBuYW1lO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNEZWNvcmF0b3IobmFtZTogc3RyaW5nKTogKG5vZGU6IERlY29yYXRvck5vZGUpID0+IGJvb2xlYW4ge1xyXG4gIHJldHVybiAobm9kZSkgPT4gZGVjb3JhdGVzKG5vZGUsIG5hbWUpO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGhhc0RlY29yYXRvcihcclxuICBub2RlOiBEZWNsYXJhdGlvblN0YXRlbWVudCB8IHtkZWNsYXJhdGlvbjogRGVjbGFyYXRpb25TdGF0ZW1lbnR9LFxyXG4gIG5hbWU6IHN0cmluZ1xyXG4pOiBib29sZWFuIHtcclxuICBsZXQgZGVjbDtcclxuICBpZiAobm9kZSBpbnN0YW5jZW9mIERlY2xhcmF0aW9uU3RhdGVtZW50KSB7XHJcbiAgICBkZWNsID0gbm9kZTtcclxuICB9IGVsc2Uge1xyXG4gICAgZGVjbCA9IG5vZGUuZGVjbGFyYXRpb247IFxyXG4gIH0gXHJcbiAgLy8gYmVjYXVzZSBpdCBjb3VsZCBiZSB1bmRlZmluZWRcclxuICByZXR1cm4gZGVjbC5kZWNvcmF0b3JzPy5zb21lKGlzRGVjb3JhdG9yKG5hbWUpKSA9PSB0cnVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVjb3JhdG9yKFxyXG4gIG5vZGU6IERlY2xhcmF0aW9uU3RhdGVtZW50LFxyXG4gIG5hbWU6IHN0cmluZ1xyXG4pOiBEZWNvcmF0b3JOb2RlIHtcclxuICByZXR1cm4gbm9kZS5kZWNvcmF0b3JzPy5maW5kKGlzRGVjb3JhdG9yKG5hbWUpKSE7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0xpYnJhcnkobm9kZTogU291cmNlKTogYm9vbGVhbiB7XHJcbiAgcmV0dXJuIG5vZGUuaXNMaWJyYXJ5IHx8IG5vZGUuaW50ZXJuYWxQYXRoLnN0YXJ0c1dpdGgoXCJ+bGliL3J0L1wiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG5vdDxUPihmbjogKHQ6IFQpID0+IGJvb2xlYW4pOiAodDogVCkgPT4gYm9vbGVhbiB7XHJcbiAgcmV0dXJuICh0OiBUKSA9PiAhZm4odCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b1N0cmluZyhub2RlOiBOb2RlKTogc3RyaW5nIHtcclxuICByZXR1cm4gQVNUQnVpbGRlci5idWlsZChub2RlKTtcclxufVxyXG5cclxuaW50ZXJmYWNlIE5hbWVkIHtcclxuICBuYW1lOiBJZGVudGlmaWVyRXhwcmVzc2lvbjtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXROYW1lKG5vZGU6IE5vZGUgJiBOYW1lZCB8IFR5cGVOb2RlKTogc3RyaW5nIHtcclxuICBpZiAobm9kZSBpbnN0YW5jZW9mIFR5cGVOb2RlKSB7XHJcbiAgICByZXR1cm4gbm9kZS5yYW5nZS50b1N0cmluZygpO1xyXG4gIH1cclxuICBpZiAobm9kZSBpbnN0YW5jZW9mIENsYXNzRGVjbGFyYXRpb24gfHwgbm9kZSBpbnN0YW5jZW9mIEludGVyZmFjZURlY2xhcmF0aW9uKSB7XHJcbiAgICByZXR1cm4gY2xhc3NOYW1lKG5vZGUpO1xyXG4gIH1cclxuICByZXR1cm4gbm9kZS5uYW1lLnJhbmdlLnRvU3RyaW5nKCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbG9uZU5vZGU8VCBleHRlbmRzIE5vZGU+KG5vZGU6IFQpOiBUIHtcclxuICByZXR1cm4gY2xvbmVEZWVwKG5vZGUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNVc2VyRW50cnkoc291cmNlOiBTb3VyY2UpOiBib29sZWFuIHtcclxuICByZXR1cm4gc291cmNlLnNvdXJjZUtpbmQgPT0gU291cmNlS2luZC5VU0VSX0VOVFJZO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2xhc3NOYW1lKF9jbGFzczogQ2xhc3NEZWNsYXJhdGlvbiB8ICBJbnRlcmZhY2VEZWNsYXJhdGlvbik6IHN0cmluZyB7XHJcbiAgbGV0IG5hbWUgPSBfY2xhc3MubmFtZS5yYW5nZS50b1N0cmluZygpO1xyXG4gIGNvbnN0IHR5cGVQYXJhbWV0ZXJzID0gX2NsYXNzLnR5cGVQYXJhbWV0ZXJzO1xyXG4gIGlmICh0eXBlUGFyYW1ldGVycykge1xyXG4gICAgbmFtZSArPSBgPCR7dHlwZVBhcmFtZXRlcnMubWFwKGdldE5hbWUpLmpvaW4oXCIsIFwiKX0+YDtcclxuICB9XHJcbiAgcmV0dXJuIG5hbWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc01ldGhvZE5hbWVkKG5hbWU6IHN0cmluZyk6IChfOiBEZWNsYXJhdGlvblN0YXRlbWVudCkgPT4gYm9vbGVhbiB7XHJcbiAgcmV0dXJuIChzdG10OiBEZWNsYXJhdGlvblN0YXRlbWVudCkgPT4gc3RtdC5raW5kID09IE5vZGVLaW5kLk1FVEhPRERFQ0xBUkFUSU9OICYmIHRvU3RyaW5nKHN0bXQubmFtZSkgPT09IG5hbWU7XHJcbn1cclxuXHJcbi8vIGV4cG9ydCBmdW5jdGlvbiBpc1N1YkNsYXNzT2YoYTogQ2xhc3NEZWNsYXJhdGlvbiwgYjogQ2xhc3NEZWNsYXJhdGlvbik6IGJvb2xlYW4ge1xyXG4vLyAgIGEuZXh0ZW5kc1R5cGU/Lm5hbWUubmV4dFxyXG4vLyB9XHJcblxyXG5leHBvcnQgY2xhc3MgU3RyaW5nQnVpbGRlciB7XHJcbiAgcHJpdmF0ZSBzYjogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgcHVzaChzOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIHRoaXMuc2IucHVzaChzKTtcclxuICB9XHJcblxyXG4gIGZpbmlzaChzZXBhcmF0b3IgPSBcIlxcblwiKTogc3RyaW5nIHtcclxuICAgIGxldCByZXMgPSB0aGlzLnNiLmpvaW4oc2VwYXJhdG9yKTtcclxuICAgIHRoaXMuc2IgPSBbXTtcclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBnZXQgIGxhc3QoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuc2JbdGhpcy5zYi5sZW5ndGggLTFdfVxyXG59Il19