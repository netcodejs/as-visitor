"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VariableDecorator = exports.FunctionDecorator = exports.ClassDecorator = exports.Decorator = exports.TopLevelDecorator = exports.registerDecorator = void 0;
const transformer_1 = require("./transformer");
const utils_1 = require("./utils");
function registerDecorator(decorator) {
    TopLevelDecorator.registerVisitor(decorator);
    return TopLevelDecorator;
}
exports.registerDecorator = registerDecorator;
class TopLevelDecorator extends transformer_1.PathTransformVisitor {
    static registerVisitor(...visitors) {
        TopLevelDecorator._visitors = visitors;
    }
    visitDecoratorNode(node) {
        TopLevelDecorator._visitors.forEach(visitor => {
            if (visitor.decoratorMatcher(node)) {
                visitor.currentPath = this.currentParentPath;
                visitor._visit(this.currentParent);
            }
        });
    }
    afterParse(_) {
        TopLevelDecorator._visitors.forEach(visitor => transformer_1.mergeTransformer(this, visitor));
        this.visit(this.program.sources.filter(utils_1.not(utils_1.isLibrary)));
        TopLevelDecorator._visitors.forEach(v => v.afterParse && v.afterParse(_));
    }
    afterInitialize(_) {
        TopLevelDecorator._visitors.forEach(v => v.afterInitialize && v.afterInitialize(_));
    }
    afterCompile(_) {
        TopLevelDecorator._visitors.forEach(v => v.afterCompile && v.afterCompile(_));
    }
}
exports.TopLevelDecorator = TopLevelDecorator;
class Decorator extends transformer_1.PathTransformVisitor {
    /**
     * Default filter that removes library files
     */
    get sourceFilter() {
        return utils_1.not(utils_1.isLibrary);
    }
    get decoratorMatcher() {
        return (node) => utils_1.decorates(node, this.name);
    }
    get name() { return ""; }
    getDecorator(node) {
        return node.decorators && node.decorators.find(this.decoratorMatcher) || null;
    }
}
exports.Decorator = Decorator;
class ClassDecorator extends Decorator {
}
exports.ClassDecorator = ClassDecorator;
class FunctionDecorator extends Decorator {
}
exports.FunctionDecorator = FunctionDecorator;
class VariableDecorator extends Decorator {
}
exports.VariableDecorator = VariableDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2RlY29yYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQ0FBdUU7QUFjdkUsbUNBQWtFO0FBR2xFLFNBQWdCLGlCQUFpQixDQUFDLFNBQW9CO0lBQ3BELGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QyxPQUFPLGlCQUFpQixDQUFDO0FBQzNCLENBQUM7QUFIRCw4Q0FHQztBQUVELE1BQWEsaUJBQWtCLFNBQVEsa0NBQW9CO0lBR3pELE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxRQUFxQjtRQUM3QyxpQkFBaUIsQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxJQUFtQjtRQUNwQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzVDLElBQUksT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNsQyxPQUFPLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztnQkFDN0MsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDcEM7UUFDSCxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRCxVQUFVLENBQUMsQ0FBUztRQUNsQixpQkFBaUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsOEJBQWdCLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDaEYsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBRyxDQUFDLGlCQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEQsaUJBQWlCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzNFLENBQUM7SUFFRCxlQUFlLENBQUMsQ0FBVTtRQUN4QixpQkFBaUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGVBQWUsSUFBSSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDckYsQ0FBQztJQUVELFlBQVksQ0FBQyxDQUFTO1FBQ3BCLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUMvRSxDQUFDO0NBQ0Y7QUE3QkQsOENBNkJDO0FBRUQsTUFBc0IsU0FBVSxTQUFRLGtDQUFvQjtJQUMxRDs7T0FFRztJQUNILElBQUksWUFBWTtRQUNkLE9BQU8sV0FBRyxDQUFDLGlCQUFTLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxDQUFDLElBQW1CLEVBQUUsRUFBRSxDQUFDLGlCQUFTLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUM1RCxDQUFDO0lBRUQsSUFBSSxJQUFJLEtBQWEsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRWpDLFlBQVksQ0FBQyxJQUEwQjtRQUNyQyxPQUFPLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksSUFBSSxDQUFDO0lBQ2hGLENBQUM7Q0FDRjtBQWpCRCw4QkFpQkM7QUFFRCxNQUFzQixjQUFlLFNBQVEsU0FBUztDQUlyRDtBQUpELHdDQUlDO0FBRUQsTUFBc0IsaUJBQWtCLFNBQVEsU0FBUztDQUV4RDtBQUZELDhDQUVDO0FBRUQsTUFBc0IsaUJBQWtCLFNBQVEsU0FBUztDQUV4RDtBQUZELDhDQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGF0aFRyYW5zZm9ybVZpc2l0b3IsIG1lcmdlVHJhbnNmb3JtZXIgfSBmcm9tIFwiLi90cmFuc2Zvcm1lclwiO1xuaW1wb3J0IHtcbiAgQ2xhc3NEZWNsYXJhdGlvbixcbiAgRmllbGREZWNsYXJhdGlvbixcbiAgTWV0aG9kRGVjbGFyYXRpb24sXG4gIFBhcnNlcixcbiAgVmFyaWFibGVEZWNsYXJhdGlvbixcbiAgRnVuY3Rpb25EZWNsYXJhdGlvbixcbiAgU291cmNlLFxuICBEZWNvcmF0b3JOb2RlLFxuICBEZWNsYXJhdGlvblN0YXRlbWVudCxcbiAgUHJvZ3JhbSxcbiAgTW9kdWxlLFxufSBmcm9tIFwiLi4vYXNcIjtcbmltcG9ydCB7IGRlY29yYXRlcywgbm90LCBpc0xpYnJhcnksIGdldERlY29yYXRvciB9IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgeyBCYXNlVmlzaXRvciB9IGZyb20gXCIuL2Jhc2VcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRGVjb3JhdG9yKGRlY29yYXRvcjogRGVjb3JhdG9yKSB7XG4gIFRvcExldmVsRGVjb3JhdG9yLnJlZ2lzdGVyVmlzaXRvcihkZWNvcmF0b3IpO1xuICByZXR1cm4gVG9wTGV2ZWxEZWNvcmF0b3I7XG59XG5cbmV4cG9ydCBjbGFzcyBUb3BMZXZlbERlY29yYXRvciBleHRlbmRzIFBhdGhUcmFuc2Zvcm1WaXNpdG9yIHtcbiAgcHJpdmF0ZSBzdGF0aWMgX3Zpc2l0b3JzOiBEZWNvcmF0b3JbXTtcblxuICBzdGF0aWMgcmVnaXN0ZXJWaXNpdG9yKC4uLnZpc2l0b3JzOiBEZWNvcmF0b3JbXSk6IHZvaWQge1xuICAgIFRvcExldmVsRGVjb3JhdG9yLl92aXNpdG9ycyA9IHZpc2l0b3JzO1xuICB9XG5cbiAgdmlzaXREZWNvcmF0b3JOb2RlKG5vZGU6IERlY29yYXRvck5vZGUpIHtcbiAgICBUb3BMZXZlbERlY29yYXRvci5fdmlzaXRvcnMuZm9yRWFjaCh2aXNpdG9yID0+IHtcbiAgICAgIGlmICh2aXNpdG9yLmRlY29yYXRvck1hdGNoZXIobm9kZSkpIHtcbiAgICAgICAgdmlzaXRvci5jdXJyZW50UGF0aCA9IHRoaXMuY3VycmVudFBhcmVudFBhdGg7XG4gICAgICAgIHZpc2l0b3IuX3Zpc2l0KHRoaXMuY3VycmVudFBhcmVudCk7XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGFmdGVyUGFyc2UoXzogUGFyc2VyKTogdm9pZCB7XG4gICAgVG9wTGV2ZWxEZWNvcmF0b3IuX3Zpc2l0b3JzLmZvckVhY2godmlzaXRvciA9PiBtZXJnZVRyYW5zZm9ybWVyKHRoaXMsIHZpc2l0b3IpKTtcbiAgICB0aGlzLnZpc2l0KHRoaXMucHJvZ3JhbS5zb3VyY2VzLmZpbHRlcihub3QoaXNMaWJyYXJ5KSkpO1xuICAgIFRvcExldmVsRGVjb3JhdG9yLl92aXNpdG9ycy5mb3JFYWNoKHYgPT4gdi5hZnRlclBhcnNlICYmIHYuYWZ0ZXJQYXJzZShfKSlcbiAgfVxuXG4gIGFmdGVySW5pdGlhbGl6ZShfOiBQcm9ncmFtKSB7XG4gICAgVG9wTGV2ZWxEZWNvcmF0b3IuX3Zpc2l0b3JzLmZvckVhY2godiA9PiB2LmFmdGVySW5pdGlhbGl6ZSAmJiB2LmFmdGVySW5pdGlhbGl6ZShfKSlcbiAgfVxuXG4gIGFmdGVyQ29tcGlsZShfOiBNb2R1bGUpIHtcbiAgICBUb3BMZXZlbERlY29yYXRvci5fdmlzaXRvcnMuZm9yRWFjaCh2ID0+IHYuYWZ0ZXJDb21waWxlICYmIHYuYWZ0ZXJDb21waWxlKF8pKVxuICB9XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBEZWNvcmF0b3IgZXh0ZW5kcyBQYXRoVHJhbnNmb3JtVmlzaXRvciB7XG4gIC8qKlxuICAgKiBEZWZhdWx0IGZpbHRlciB0aGF0IHJlbW92ZXMgbGlicmFyeSBmaWxlc1xuICAgKi9cbiAgZ2V0IHNvdXJjZUZpbHRlcigpOiAoczogU291cmNlKSA9PiBib29sIHtcbiAgICByZXR1cm4gbm90KGlzTGlicmFyeSk7XG4gIH1cblxuICBnZXQgZGVjb3JhdG9yTWF0Y2hlcigpOiAobm9kZTogRGVjb3JhdG9yTm9kZSkgPT4gYm9vbGVhbiB7XG4gICAgcmV0dXJuIChub2RlOiBEZWNvcmF0b3JOb2RlKSA9PiBkZWNvcmF0ZXMobm9kZSwgdGhpcy5uYW1lKVxuICB9XG5cbiAgZ2V0IG5hbWUoKTogc3RyaW5nIHsgcmV0dXJuIFwiXCI7IH1cblxuICBnZXREZWNvcmF0b3Iobm9kZTogRGVjbGFyYXRpb25TdGF0ZW1lbnQpOiBEZWNvcmF0b3JOb2RlIHwgbnVsbCB7XG4gICAgcmV0dXJuIG5vZGUuZGVjb3JhdG9ycyAmJiBub2RlLmRlY29yYXRvcnMuZmluZCh0aGlzLmRlY29yYXRvck1hdGNoZXIpIHx8IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENsYXNzRGVjb3JhdG9yIGV4dGVuZHMgRGVjb3JhdG9yIHtcbiAgYWJzdHJhY3QgdmlzaXRGaWVsZERlY2xhcmF0aW9uKG5vZGU6IEZpZWxkRGVjbGFyYXRpb24pOiB2b2lkO1xuICBhYnN0cmFjdCB2aXNpdE1ldGhvZERlY2xhcmF0aW9uKG5vZGU6IE1ldGhvZERlY2xhcmF0aW9uKTogdm9pZDtcbiAgYWJzdHJhY3QgdmlzaXRDbGFzc0RlY2xhcmF0aW9uKG5vZGU6IENsYXNzRGVjbGFyYXRpb24pOiB2b2lkO1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRnVuY3Rpb25EZWNvcmF0b3IgZXh0ZW5kcyBEZWNvcmF0b3Ige1xuICBhYnN0cmFjdCB2aXNpdEZ1bmN0aW9uRGVjbGFyYXRpb24obm9kZTogRnVuY3Rpb25EZWNsYXJhdGlvbik6IHZvaWQ7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBWYXJpYWJsZURlY29yYXRvciBleHRlbmRzIERlY29yYXRvciB7XG4gIGFic3RyYWN0IHZpc2l0VmFyaWFibGVEZWNsYXJhdGlvbihub2RlOiBWYXJpYWJsZURlY2xhcmF0aW9uKTogdm9pZDtcbn1cbiJdfQ==