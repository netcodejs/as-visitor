"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VariableDecorator = exports.FunctionDecorator = exports.ClassDecorator = exports.Decorator = exports.TopLevelDecorator = exports.registerDecorator = void 0;
const transformer_1 = require("./transformer");
const utils_1 = require("./utils");
function registerDecorator(decorator) {
    TopLevelDecorator.registerVisitor(decorator);
    return TopLevelDecorator;
}
exports.registerDecorator = registerDecorator;
class TopLevelDecorator extends transformer_1.PathTransformVisitor {
    static registerVisitor(...visitors) {
        TopLevelDecorator._visitors = visitors;
    }
    visitDecoratorNode(node) {
        TopLevelDecorator._visitors.forEach(visitor => {
            if (visitor.decoratorMatcher(node)) {
                visitor.currentPath = this.currentParentPath;
                visitor._visit(this.currentParent);
            }
        });
    }
    afterParse(_) {
        TopLevelDecorator._visitors.forEach(visitor => transformer_1.mergeTransformer(this, visitor));
        this.visit(this.program.sources.filter(utils_1.not(utils_1.isLibrary)));
        TopLevelDecorator._visitors.forEach(v => v.afterParse && v.afterParse(_));
    }
    afterInitialize(_) {
        TopLevelDecorator._visitors.forEach(v => v.afterInitialize && v.afterInitialize(_));
    }
    afterCompile(_) {
        TopLevelDecorator._visitors.forEach(v => v.afterCompile && v.afterCompile(_));
    }
}
exports.TopLevelDecorator = TopLevelDecorator;
class Decorator extends transformer_1.PathTransformVisitor {
    /**
     * Default filter that removes library files
     */
    get sourceFilter() {
        return utils_1.not(utils_1.isLibrary);
    }
    get decoratorMatcher() {
        return (node) => utils_1.decorates(node, this.name);
    }
    get name() { return ""; }
    getDecorator(node) {
        return node.decorators && node.decorators.find(this.decoratorMatcher) || null;
    }
}
exports.Decorator = Decorator;
class ClassDecorator extends Decorator {
}
exports.ClassDecorator = ClassDecorator;
class FunctionDecorator extends Decorator {
}
exports.FunctionDecorator = FunctionDecorator;
class VariableDecorator extends Decorator {
}
exports.VariableDecorator = VariableDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2RlY29yYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQ0FBdUU7QUFjdkUsbUNBQWtFO0FBR2xFLFNBQWdCLGlCQUFpQixDQUFDLFNBQW9CO0lBQ3BELGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QyxPQUFPLGlCQUFpQixDQUFDO0FBQzNCLENBQUM7QUFIRCw4Q0FHQztBQUVELE1BQWEsaUJBQWtCLFNBQVEsa0NBQW9CO0lBR3pELE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBRyxRQUFxQjtRQUM3QyxpQkFBaUIsQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxJQUFtQjtRQUNwQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzVDLElBQUksT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNsQyxPQUFPLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztnQkFDN0MsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDcEM7UUFDSCxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRCxVQUFVLENBQUMsQ0FBUztRQUNsQixpQkFBaUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsOEJBQWdCLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDaEYsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBRyxDQUFDLGlCQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEQsaUJBQWlCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzNFLENBQUM7SUFFRCxlQUFlLENBQUMsQ0FBVTtRQUN4QixpQkFBaUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGVBQWUsSUFBSSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDckYsQ0FBQztJQUVELFlBQVksQ0FBQyxDQUFTO1FBQ3BCLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUMvRSxDQUFDO0NBQ0Y7QUE3QkQsOENBNkJDO0FBRUQsTUFBc0IsU0FBVSxTQUFRLGtDQUFvQjtJQUMxRDs7T0FFRztJQUNILElBQUksWUFBWTtRQUNkLE9BQU8sV0FBRyxDQUFDLGlCQUFTLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxDQUFDLElBQW1CLEVBQUUsRUFBRSxDQUFDLGlCQUFTLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUM1RCxDQUFDO0lBRUQsSUFBSSxJQUFJLEtBQWEsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRWpDLFlBQVksQ0FBQyxJQUEwQjtRQUNyQyxPQUFPLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksSUFBSSxDQUFDO0lBQ2hGLENBQUM7Q0FDRjtBQWpCRCw4QkFpQkM7QUFFRCxNQUFzQixjQUFlLFNBQVEsU0FBUztDQUlyRDtBQUpELHdDQUlDO0FBRUQsTUFBc0IsaUJBQWtCLFNBQVEsU0FBUztDQUV4RDtBQUZELDhDQUVDO0FBRUQsTUFBc0IsaUJBQWtCLFNBQVEsU0FBUztDQUV4RDtBQUZELDhDQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGF0aFRyYW5zZm9ybVZpc2l0b3IsIG1lcmdlVHJhbnNmb3JtZXIgfSBmcm9tIFwiLi90cmFuc2Zvcm1lclwiO1xyXG5pbXBvcnQge1xyXG4gIENsYXNzRGVjbGFyYXRpb24sXHJcbiAgRmllbGREZWNsYXJhdGlvbixcclxuICBNZXRob2REZWNsYXJhdGlvbixcclxuICBQYXJzZXIsXHJcbiAgVmFyaWFibGVEZWNsYXJhdGlvbixcclxuICBGdW5jdGlvbkRlY2xhcmF0aW9uLFxyXG4gIFNvdXJjZSxcclxuICBEZWNvcmF0b3JOb2RlLFxyXG4gIERlY2xhcmF0aW9uU3RhdGVtZW50LFxyXG4gIFByb2dyYW0sXHJcbiAgTW9kdWxlLFxyXG59IGZyb20gXCIuLi9hc1wiO1xyXG5pbXBvcnQgeyBkZWNvcmF0ZXMsIG5vdCwgaXNMaWJyYXJ5LCBnZXREZWNvcmF0b3IgfSBmcm9tIFwiLi91dGlsc1wiO1xyXG5pbXBvcnQgeyBCYXNlVmlzaXRvciB9IGZyb20gXCIuL2Jhc2VcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckRlY29yYXRvcihkZWNvcmF0b3I6IERlY29yYXRvcikge1xyXG4gIFRvcExldmVsRGVjb3JhdG9yLnJlZ2lzdGVyVmlzaXRvcihkZWNvcmF0b3IpO1xyXG4gIHJldHVybiBUb3BMZXZlbERlY29yYXRvcjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRvcExldmVsRGVjb3JhdG9yIGV4dGVuZHMgUGF0aFRyYW5zZm9ybVZpc2l0b3Ige1xyXG4gIHByaXZhdGUgc3RhdGljIF92aXNpdG9yczogRGVjb3JhdG9yW107XHJcblxyXG4gIHN0YXRpYyByZWdpc3RlclZpc2l0b3IoLi4udmlzaXRvcnM6IERlY29yYXRvcltdKTogdm9pZCB7XHJcbiAgICBUb3BMZXZlbERlY29yYXRvci5fdmlzaXRvcnMgPSB2aXNpdG9ycztcclxuICB9XHJcblxyXG4gIHZpc2l0RGVjb3JhdG9yTm9kZShub2RlOiBEZWNvcmF0b3JOb2RlKSB7XHJcbiAgICBUb3BMZXZlbERlY29yYXRvci5fdmlzaXRvcnMuZm9yRWFjaCh2aXNpdG9yID0+IHtcclxuICAgICAgaWYgKHZpc2l0b3IuZGVjb3JhdG9yTWF0Y2hlcihub2RlKSkge1xyXG4gICAgICAgIHZpc2l0b3IuY3VycmVudFBhdGggPSB0aGlzLmN1cnJlbnRQYXJlbnRQYXRoO1xyXG4gICAgICAgIHZpc2l0b3IuX3Zpc2l0KHRoaXMuY3VycmVudFBhcmVudCk7XHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBhZnRlclBhcnNlKF86IFBhcnNlcik6IHZvaWQge1xyXG4gICAgVG9wTGV2ZWxEZWNvcmF0b3IuX3Zpc2l0b3JzLmZvckVhY2godmlzaXRvciA9PiBtZXJnZVRyYW5zZm9ybWVyKHRoaXMsIHZpc2l0b3IpKTtcclxuICAgIHRoaXMudmlzaXQodGhpcy5wcm9ncmFtLnNvdXJjZXMuZmlsdGVyKG5vdChpc0xpYnJhcnkpKSk7XHJcbiAgICBUb3BMZXZlbERlY29yYXRvci5fdmlzaXRvcnMuZm9yRWFjaCh2ID0+IHYuYWZ0ZXJQYXJzZSAmJiB2LmFmdGVyUGFyc2UoXykpXHJcbiAgfVxyXG5cclxuICBhZnRlckluaXRpYWxpemUoXzogUHJvZ3JhbSkge1xyXG4gICAgVG9wTGV2ZWxEZWNvcmF0b3IuX3Zpc2l0b3JzLmZvckVhY2godiA9PiB2LmFmdGVySW5pdGlhbGl6ZSAmJiB2LmFmdGVySW5pdGlhbGl6ZShfKSlcclxuICB9XHJcblxyXG4gIGFmdGVyQ29tcGlsZShfOiBNb2R1bGUpIHtcclxuICAgIFRvcExldmVsRGVjb3JhdG9yLl92aXNpdG9ycy5mb3JFYWNoKHYgPT4gdi5hZnRlckNvbXBpbGUgJiYgdi5hZnRlckNvbXBpbGUoXykpXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRGVjb3JhdG9yIGV4dGVuZHMgUGF0aFRyYW5zZm9ybVZpc2l0b3Ige1xyXG4gIC8qKlxyXG4gICAqIERlZmF1bHQgZmlsdGVyIHRoYXQgcmVtb3ZlcyBsaWJyYXJ5IGZpbGVzXHJcbiAgICovXHJcbiAgZ2V0IHNvdXJjZUZpbHRlcigpOiAoczogU291cmNlKSA9PiBib29sIHtcclxuICAgIHJldHVybiBub3QoaXNMaWJyYXJ5KTtcclxuICB9XHJcblxyXG4gIGdldCBkZWNvcmF0b3JNYXRjaGVyKCk6IChub2RlOiBEZWNvcmF0b3JOb2RlKSA9PiBib29sZWFuIHtcclxuICAgIHJldHVybiAobm9kZTogRGVjb3JhdG9yTm9kZSkgPT4gZGVjb3JhdGVzKG5vZGUsIHRoaXMubmFtZSlcclxuICB9XHJcblxyXG4gIGdldCBuYW1lKCk6IHN0cmluZyB7IHJldHVybiBcIlwiOyB9XHJcblxyXG4gIGdldERlY29yYXRvcihub2RlOiBEZWNsYXJhdGlvblN0YXRlbWVudCk6IERlY29yYXRvck5vZGUgfCBudWxsIHtcclxuICAgIHJldHVybiBub2RlLmRlY29yYXRvcnMgJiYgbm9kZS5kZWNvcmF0b3JzLmZpbmQodGhpcy5kZWNvcmF0b3JNYXRjaGVyKSB8fCBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENsYXNzRGVjb3JhdG9yIGV4dGVuZHMgRGVjb3JhdG9yIHtcclxuICBhYnN0cmFjdCB2aXNpdEZpZWxkRGVjbGFyYXRpb24obm9kZTogRmllbGREZWNsYXJhdGlvbik6IHZvaWQ7XHJcbiAgYWJzdHJhY3QgdmlzaXRNZXRob2REZWNsYXJhdGlvbihub2RlOiBNZXRob2REZWNsYXJhdGlvbik6IHZvaWQ7XHJcbiAgYWJzdHJhY3QgdmlzaXRDbGFzc0RlY2xhcmF0aW9uKG5vZGU6IENsYXNzRGVjbGFyYXRpb24pOiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRnVuY3Rpb25EZWNvcmF0b3IgZXh0ZW5kcyBEZWNvcmF0b3Ige1xyXG4gIGFic3RyYWN0IHZpc2l0RnVuY3Rpb25EZWNsYXJhdGlvbihub2RlOiBGdW5jdGlvbkRlY2xhcmF0aW9uKTogdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFZhcmlhYmxlRGVjb3JhdG9yIGV4dGVuZHMgRGVjb3JhdG9yIHtcclxuICBhYnN0cmFjdCB2aXNpdFZhcmlhYmxlRGVjbGFyYXRpb24obm9kZTogVmFyaWFibGVEZWNsYXJhdGlvbik6IHZvaWQ7XHJcbn1cclxuIl19